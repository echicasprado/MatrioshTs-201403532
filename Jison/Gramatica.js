/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,30],$V2=[1,17],$V3=[1,18],$V4=[1,21],$V5=[1,28],$V6=[1,29],$V7=[1,31],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[5,20,25,26,39,41,50,57,58,65,67,68,69,73,74,75],$Vd=[1,42],$Ve=[1,43],$Vf=[1,48],$Vg=[45,61,103,104],$Vh=[1,53],$Vi=[1,74],$Vj=[1,71],$Vk=[1,72],$Vl=[1,65],$Vm=[1,64],$Vn=[1,66],$Vo=[1,67],$Vp=[1,68],$Vq=[1,69],$Vr=[1,70],$Vs=[5,20,22,25,26,39,41,45,50,54,57,58,65,67,68,69,73,74,75],$Vt=[5,20,22,25,26,29,33,39,41,45,50,54,57,58,65,67,68,69,73,74,75],$Vu=[2,19],$Vv=[1,81],$Vw=[5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75,78,79,80,81,82,83,84,85,87,88,89,90,91,92,98],$Vx=[1,93],$Vy=[20,25,26,39,41,57,58],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[1,107],$VI=[1,108],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[5,20,22,25,26,28,29,33,39,41,50,56,57,58,61,65,67,68,69,73,74,75,78,79,80,81,82,83,84,85,87,88,89,90,91,92,98,103,104],$VP=[1,127],$VQ=[1,134],$VR=[1,130],$VS=[1,131],$VT=[1,132],$VU=[1,133],$VV=[5,20,22,25,26,39,41,50,57,58,64,65,67,68,69,73,74,75],$VW=[1,147],$VX=[1,169],$VY=[28,33,56],$VZ=[1,180],$V_=[5,19,20,22,25,26,28,33,39,41,45,50,54,57,58,65,67,68,69,73,74,75],$V$=[1,184],$V01=[28,33],$V11=[5,20,22,25,26,28,29,33,39,41,45,50,54,56,57,58,61,65,67,68,69,73,74,75,78,79,80,81,82,83,84,85,87,88,89,90,91,92,98,103,104],$V21=[5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75,78,79,84,85,87,88,89,90,91,92,98],$V31=[5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75,78,79,81,82,83,84,85,87,88,89,90,91,92,98],$V41=[5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75,84,85,87,88,98],$V51=[5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75,84,85,87,88,89,90,98],$V61=[1,210],$V71=[5,20,22,25,26,33,39,41,45,50,54,57,58,65,67,68,69,73,74,75],$V81=[20,26],$V91=[1,223],$Va1=[1,224],$Vb1=[5,20,25,26,39,41,50,57,58,64,65,67,68,69,73,74,75],$Vc1=[1,239],$Vd1=[20,33],$Ve1=[20,73,74],$Vf1=[2,57],$Vg1=[1,267],$Vh1=[1,266],$Vi1=[5,20,22,25,26,33,39,41,50,57,58,65,67,68,69,73,74,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"FUNCTION":7,"PRINT":8,"GRAPH_TS":9,"DECLARATION":10,"ASSIGNMENT":11,"TYPES":12,"SENTENCE_IF":13,"SENTENCE_WHILE":14,"SENTENCE_DO_WHILE":15,"SENTENCE_SWITCH":16,"SENTENCE_FOR":17,"BLOCK":18,"llave_izq":19,"llave_der":20,"PUNTO_Y_COMA":21,"punto_y_coma":22,"FUNCTION_HEAD":23,"FUNCTION_SENTENCES":24,"function":25,"identificador":26,"par_izq":27,"par_der":28,"dos_puntos":29,"TYPE":30,"L_PARAMETROS":31,"FUNCTION_SENTENCE":32,"coma":33,"PARAMETRO":34,"void":35,"number":36,"string":37,"boolean":38,"print":39,"E":40,"graficar_ts":41,"TYPE_DECLARATION":42,"L_ID":43,"TYPE_VARIABLE":44,"=":45,"L_DIMENSION":46,"L_ARRAY":47,"L_E_TYPE":48,"E_TYPE":49,"type":50,"ATTRIBUTES_TYPE":51,"ATTRIBUTE_TYPE":52,"END_ATTRIBUTE_TYPE":53,"cor_izq":54,"L_E":55,"cor_der":56,"let":57,"const":58,"ID_ASSIGNMENT":59,"POST_FIXED":60,"punto":61,"ACCESS_DIMENSION":62,"ELSE_IF":63,"else":64,"if":65,"Block":66,"while":67,"do":68,"switch":69,"BLOCK_SWITCH":70,"L_CASE":71,"CASE":72,"case":73,"default":74,"for":75,"in":76,"of":77,"+":78,"-":79,"**":80,"*":81,"/":82,"%":83,"&&":84,"||":85,"!":86,"!=":87,"==":88,">=":89,">":90,"<=":91,"<":92,"val_number":93,"val_string":94,"val_verdadero":95,"val_falso":96,"val_nulo":97,"?":98,"ACCESS":99,"pop":100,"length":101,"push":102,"--":103,"++":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"llave_izq",20:"llave_der",22:"punto_y_coma",25:"function",26:"identificador",27:"par_izq",28:"par_der",29:"dos_puntos",33:"coma",35:"void",36:"number",37:"string",38:"boolean",39:"print",41:"graficar_ts",45:"=",50:"type",54:"cor_izq",56:"cor_der",57:"let",58:"const",61:"punto",64:"else",65:"if",66:"Block",67:"while",68:"do",69:"switch",73:"case",74:"default",75:"for",76:"in",77:"of",78:"+",79:"-",80:"**",81:"*",82:"/",83:"%",84:"&&",85:"||",86:"!",87:"!=",88:"==",89:">=",90:">",91:"<=",92:"<",93:"val_number",94:"val_string",95:"val_verdadero",96:"val_falso",97:"val_nulo",98:"?",100:"pop",101:"length",102:"push",103:"--",104:"++"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[18,3],[18,2],[21,1],[21,0],[7,4],[7,3],[23,6],[23,7],[24,2],[24,1],[32,1],[32,1],[32,1],[32,1],[32,1],[31,3],[31,1],[34,3],[30,1],[30,1],[30,1],[30,1],[30,1],[8,5],[9,4],[10,4],[10,6],[10,5],[10,7],[10,8],[48,3],[48,1],[49,3],[49,5],[12,7],[51,2],[51,1],[52,4],[52,5],[53,1],[53,1],[53,0],[47,5],[47,3],[42,1],[42,1],[43,3],[43,1],[44,2],[44,0],[46,3],[46,2],[11,4],[11,3],[59,3],[59,4],[59,1],[59,2],[62,4],[62,3],[13,3],[13,1],[63,7],[63,5],[14,6],[15,7],[16,5],[70,3],[70,2],[71,2],[71,1],[72,4],[72,3],[72,3],[72,2],[17,12],[17,8],[17,8],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,3],[40,3],[40,5],[40,2],[40,5],[40,5],[40,6],[40,1],[99,3],[99,4],[99,5],[99,6],[99,1],[99,2],[99,3],[99,4],[60,1],[60,1],[55,3],[55,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 3: case 51:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 32: case 47: case 52: case 63: case 134:
 this.$ = []; this.$.push($$[$0]); 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 55: case 56: case 64:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = new Block($$[$0-1]); 
break;
case 17:
 this.$ = new Block([]); 
break;
case 18: case 19:
 this.$ = ";"; 
break;
case 20:
 this.$ = $$[$0-3]; 
break;
case 21:
 this.$ = $$[$0-2]; 
break;
case 22:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-4],[],$$[$0]); 
break;
case 23:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-3],$$[$0]); 
break;
case 24: case 25:
 
break;
case 26: case 27: case 28: case 29:
 
                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addInstruction(stack[stack.length -1]);
                                        break;
                                }
                        }
                
break;
case 30:
 
                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addFunction(stack[stack.length - 1]);
                                        break;
                                }
                        }       
                
break;
case 31: case 46: case 62:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 33:
 this.$ = new Parameter(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0],null); 
break;
case 34:
 this.$ = new Type(EnumType.VOID,""); 
break;
case 35:
 this.$ = new Type(EnumType.NUMBER,""); 
break;
case 36:
 this.$ = new Type(EnumType.STRING,""); 
break;
case 37:
 this.$ = new Type(EnumType.BOOLEAN,""); 
break;
case 38:
 this.$ = new Type(EnumType.TYPE,$$[$0]); 
break;
case 39:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2]); 
break;
case 40:
 console.log("Si llego"); this.$ = new GraphTs(this._$.first_line,this.$.first_column); 
break;
case 41:
 this.$ = new Declaration(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1],""); 
break;
case 42:
 this.$ = new Declaration(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]); 
break;
case 43:
 this.$ = new DeclarationArray(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],""); 
break;
case 44:
 this.$ = new DeclarationArray(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],new Value(new Type(EnumType.ARRAY,""),$$[$0-1])); 
break;
case 45:
 this.$ = new DeclarationTypes(this._$.first_line,this._$.first_column,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-2]); 
break;
case 48:
 this.$ = new AttributeTypeAssignment(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]); 
break;
case 49:
 this.$ = new TypeAssignment(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-1]);
break;
case 50:
 this.$ = new TypeDefinition(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-2]); 
break;
case 53:
 this.$ = new TypeAttributeDefinition(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]); 
break;
case 54:
 this.$ = new TypeAttributeArrayDefinition(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2],$$[$0-1]); 
break;
case 57:
this.$ = ';'; 
break;
case 58:
 this.$ = $$[$0-4]; this.$.push($$[$0-2]); 
break;
case 59: case 75:
 this.$ = []; this.$.push($$[$0-1]); 
break;
case 60:
 this.$ = new DeclarationType(EnumDeclarationType.LET); 
break;
case 61:
 this.$ = new DeclarationType(EnumDeclarationType.CONST); 
break;
case 65:
 this.$ = new Type(EnumType.NULL,""); 
break;
case 66:
 this.$ = $$[$0-2] + 1; 
break;
case 67:
 this.$ = 1; 
break;
case 68:
 
                for(var i = 0; i < $$[$0-3].length;i++){
                        if($$[$0-3][i] instanceof AccessArray){
                                this.$ = new AssignmentArray(this._$.first_line,this.$.first_column,$$[$0-3],$$[$0-1]);
                                return;
                        }
                }
                this.$ = new Assignment(this._$.first_line,this.$.first_column,$$[$0-3],$$[$0-1]); 
        
break;
case 69:
 this.$ = new Unary(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0-2]); 
break;
case 70: case 123:
 this.$ = $$[$0-2]; this.$.push(new Id(this._$.first_line,this._$.first_column,$$[$0])); 
break;
case 71: case 124:
 this.$ = $$[$0-3]; this.$.push(new AccessArray(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0])); 
break;
case 72: case 127:
 this.$ = []; this.$.push(new Id(this._$.first_line,this._$.first_column,$$[$0])); 
break;
case 73: case 128:
 this.$ = []; this.$.push(new AccessArray(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0])); 
break;
case 74:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 94:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.PLUS),$$[$0-2],$$[$0]); 
break;
case 95:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MINUS),$$[$0-2],$$[$0]); 
break;
case 96:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.POWER),$$[$0-2],$$[$0]); 
break;
case 97:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MULTIPLICATION),$$[$0-2],$$[$0]); 
break;
case 98:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.DIVISION),$$[$0-2],$$[$0]); 
break;
case 99:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MODULE),$$[$0-2],$$[$0]); 
break;
case 100:
 this.$ = new Logic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.AND),$$[$0-2],$$[$0]); 
break;
case 101:
 this.$ = new Logic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.OR),$$[$0-2],$$[$0]); 
break;
case 102:
 this.$ = new Unary(this._$.first_line, this._$.first_column, new OperationType(EnumOperationType.NOT), $$[$0]); 
break;
case 103:
 this.$ = new Unary(this._$.first_line, this._$.first_column, new OperationType(EnumOperationType.NEGATIVE), $$[$0]);
break;
case 104:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.DIFFERENT_THAN),$$[$0-2],$$[$0]); 
break;
case 105:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LIKE_THAN),$$[$0-2],$$[$0]); 
break;
case 106:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MORE_EQUAL_TO),$$[$0-2],$$[$0]); 
break;
case 107:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MORE_THAN),$$[$0-2],$$[$0]); 
break;
case 108:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LESS_EQUAL_TO),$$[$0-2],$$[$0]); 
break;
case 109:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LESS_THAN),$$[$0-2],$$[$0]); 
break;
case 110:
 this.$ = new Value(new Type(EnumType.NUMBER,""),$$[$0]); 
break;
case 111:
 this.$ = new Value(new Type(EnumType.STRING,""),$$[$0]); 
break;
case 112: case 113:
 this.$ = new Value(new Type(EnumType.BOOLEAN,""),$$[$0]); 
break;
case 114:
 this.$ = new Value(new Type(EnumType.NULL,""),$$[$0]); 
break;
case 115:
 this.$ = $$[$0-1]; this.$.parentesis = true; 
break;
case 116:
 this.$ = $$[$0-1]; 
break;
case 117:
 this.$ = new Ternary(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 118:
 this.$ = new Unary(this._$.first_line,this._$.first_column,$$[$0],new Access(this._$.first_line,this._$.first_column,$$[$0-1])); 
break;
case 119:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.POP),new Access(this._$.first_line,this._$.first_column,$$[$0-4]),""); 
break;
case 120:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.LENGTH),new Access(this._$.first_line,this._$.first_column,$$[$0-4]),""); 
break;
case 121:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.PUSH),new Access(this._$.first_line,this._$.first_column,$$[$0-5]),$$[$0-1]); 
break;
case 122:
 this.$ = new Access(this._$.first_line,this._$.first_column,$$[$0]); 
break;
case 125:
 this.$ = $$[$0-4]; this.$.push(new CallFunction(this._$.first_line,this._$.first_column,$$[$0-2],[])); 
break;
case 126:
 this.$ = $$[$0-5]; this.$.push(new CallFunction(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1])); 
break;
case 129:
 this.$ = []; this.$.push(new CallFunction(this._$.first_line,this._$.first_column,$$[$0-2],[])); 
break;
case 130:
 this.$ = []; this.$.push(new CallFunction(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1])); 
break;
case 131:
 this.$ = new OperationType(EnumOperationType.MINUS_MINUS); 
break;
case 132:
 this.$ = new OperationType(EnumOperationType.PLUS_PLUS); 
break;
case 133:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,23:16,25:$V0,26:$V1,39:$V2,41:$V3,42:19,50:$V4,57:$V5,58:$V6,59:20,63:22,65:$V7,67:$V8,68:$V9,69:$Va,75:$Vb},{1:[3]},{5:[1,32],6:33,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,23:16,25:$V0,26:$V1,39:$V2,41:$V3,42:19,50:$V4,57:$V5,58:$V6,59:20,63:22,65:$V7,67:$V8,68:$V9,69:$Va,75:$Vb},{1:[2,2]},o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),{19:[1,34]},{27:[1,35]},{27:[1,36]},{26:[1,38],43:37},{45:[1,39],60:40,61:[1,41],103:$Vd,104:$Ve},{26:[1,44]},o($Vc,[2,77],{64:[1,45]}),{27:[1,46]},{18:47,19:$Vf},{27:[1,49]},{27:[1,50]},{26:[1,51]},{26:[2,60]},{26:[2,61]},o($Vg,[2,72],{62:52,54:$Vh}),{27:[1,54]},{1:[2,1]},o($Vc,[2,3]),{7:62,8:58,9:59,10:60,11:61,20:[1,56],23:16,24:55,25:$V0,26:$V1,32:57,39:$V2,41:$V3,42:19,57:$V5,58:$V6,59:20},{26:$Vi,27:$Vj,40:63,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{28:[1,75]},o($Vs,[2,65],{44:76,29:[1,78],33:[1,77]}),o($Vt,[2,63]),{26:$Vi,27:$Vj,40:79,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vc,$Vu,{21:80,22:$Vv}),{26:[1,82]},o($Vw,[2,131]),o($Vw,[2,132]),{45:[1,83]},{18:84,19:$Vf,65:[1,85]},{26:$Vi,27:$Vj,40:86,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{67:[1,87]},{4:88,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,20:[1,89],23:16,25:$V0,26:$V1,39:$V2,41:$V3,42:19,50:$V4,57:$V5,58:$V6,59:20,63:22,65:$V7,67:$V8,68:$V9,69:$Va,75:$Vb},{26:$Vi,27:$Vj,40:90,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{42:91,57:$V5,58:$V6},{27:[1,92]},o($Vg,[2,73],{54:$Vx}),{26:$Vi,27:$Vj,40:94,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:95,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{20:[1,96]},o($Vc,[2,21]),{7:62,8:58,9:59,10:60,11:61,20:[2,25],23:16,24:97,25:$V0,26:$V1,32:57,39:$V2,41:$V3,42:19,57:$V5,58:$V6,59:20},o($Vy,[2,26]),o($Vy,[2,27]),o($Vy,[2,28]),o($Vy,[2,29]),o($Vy,[2,30]),{28:[1,98],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{26:$Vi,27:$Vj,40:114,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:115,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vw,[2,110]),o($Vw,[2,111]),o($Vw,[2,112]),o($Vw,[2,113]),o($Vw,[2,114]),{26:$Vi,27:$Vj,40:116,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:118,54:$Vk,55:117,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vw,[2,122],{60:119,61:[1,120],103:$Vd,104:$Ve}),o($VO,[2,127],{62:121,27:[1,122],54:$Vh}),o($Vc,$Vu,{21:123,22:$Vv}),o($Vc,$Vu,{21:124,46:126,22:$Vv,45:[1,125],54:$VP}),{26:[1,128]},{26:$VQ,30:129,35:$VR,36:$VS,37:$VT,38:$VU},o($Vc,$Vu,{21:135,22:$Vv,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN}),o($Vc,[2,69]),o($Vc,[2,18]),o($Vg,[2,70],{62:136,54:$Vh}),{19:[1,137]},o($Vc,[2,76]),{27:[1,138]},{28:[1,139],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{27:[1,140]},{6:33,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,20:[1,141],23:16,25:$V0,26:$V1,39:$V2,41:$V3,42:19,50:$V4,57:$V5,58:$V6,59:20,63:22,65:$V7,67:$V8,68:$V9,69:$Va,75:$Vb},o($VV,[2,17]),{28:[1,142],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{26:[1,143]},{26:$VW,28:[1,144],31:145,34:146},{26:$Vi,27:$Vj,40:148,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{56:[1,149],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{28:[1,150],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},o($Vc,[2,20]),{20:[2,24]},o($Vc,$Vu,{21:151,22:$Vv}),{26:$Vi,27:$Vj,40:152,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:153,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:154,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:155,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:156,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:157,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:158,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:159,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:160,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:161,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:162,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:163,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:164,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:165,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:166,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vw,[2,102]),o($Vw,[2,103]),{28:[1,167],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{33:$VX,56:[1,168]},o($VY,[2,134],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN}),o($Vw,[2,118]),{26:[1,173],100:[1,170],101:[1,171],102:[1,172]},o($VO,[2,128],{54:$Vx}),{26:$Vi,27:$Vj,28:[1,174],40:118,54:$Vk,55:175,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vc,[2,40]),o($Vc,[2,41]),{19:[1,177],26:$Vi,27:$Vj,40:176,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vc,$Vu,{21:178,22:$Vv,45:[1,179],54:$VZ}),{56:[1,181]},o($Vt,[2,62]),o($Vs,[2,64]),o($V_,[2,34]),o($V_,[2,35]),o($V_,[2,36]),o($V_,[2,37]),o($V_,[2,38]),o($Vc,[2,68]),o($Vg,[2,71],{54:$Vx}),{26:$V$,51:182,52:183},{26:$Vi,27:$Vj,40:185,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{18:186,19:$Vf},{26:$Vi,27:$Vj,40:187,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($VV,[2,16]),{19:[1,189],70:188},{45:[1,190],76:[1,191],77:[1,192]},{29:[1,193]},{28:[1,194],33:[1,195]},o($V01,[2,32]),{29:[1,196]},{56:[1,197],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},o($V11,[2,75]),{66:[1,198]},o($Vc,[2,39]),o($V21,[2,94],{80:$VB,81:$VC,82:$VD,83:$VE}),o($V21,[2,95],{80:$VB,81:$VC,82:$VD,83:$VE}),o($V31,[2,96],{80:$VB}),o($V31,[2,97],{80:$VB}),o($V31,[2,98],{80:$VB}),o($V31,[2,99],{80:$VB}),o([5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75,84,85,98],[2,100],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM}),o([5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75,85,98],[2,101],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM}),o([5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75,84,85,87,98],[2,104],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM}),o($V41,[2,105],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,89:$VJ,90:$VK,91:$VL,92:$VM}),o($V41,[2,106],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,91:$VL,92:$VM}),o($V41,[2,107],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,91:$VL,92:$VM}),o($V51,[2,108],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE}),o($V51,[2,109],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE}),{29:[1,199],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},o($Vw,[2,115]),o($Vw,[2,116]),{26:$Vi,27:$Vj,40:200,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{27:[1,201]},{27:[1,202]},{27:[1,203]},o($VO,[2,123],{62:204,27:[1,205],54:$Vh}),o($VO,[2,129]),{28:[1,206],33:$VX},o($Vc,$Vu,{21:207,22:$Vv,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN}),{26:$V61,48:208,49:209},o($Vc,[2,43]),{47:211,54:[1,212]},{56:[1,213]},o($V71,[2,67]),{20:[1,214],26:$V$,52:215},o($V81,[2,52]),{29:[1,216]},{28:[1,217],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},o($Vc,$Vu,{21:218,22:$Vv}),{28:[1,219],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},o($Vc,[2,82]),{20:[1,221],71:220,72:222,73:$V91,74:$Va1},{26:$Vi,27:$Vj,40:225,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:226,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$Vi,27:$Vj,40:227,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{26:$VQ,30:228,35:$VR,36:$VS,37:$VT,38:$VU},{29:[1,229]},{26:$VW,34:230},{26:$VQ,30:231,35:$VR,36:$VS,37:$VT,38:$VU},o($V11,[2,74]),o($Vb1,[2,79]),{26:$Vi,27:$Vj,40:232,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($VY,[2,133],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN}),{28:[1,233]},{28:[1,234]},{26:$Vi,27:$Vj,40:235,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($VO,[2,124],{54:$Vx}),{26:$Vi,27:$Vj,28:[1,236],40:118,54:$Vk,55:237,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($VO,[2,130]),o($Vc,[2,42]),{20:[1,238],33:$Vc1},o($Vd1,[2,47]),{29:[1,240]},o($Vc,$Vu,{21:241,22:$Vv,33:[1,242]}),{26:$Vi,27:$Vj,40:118,54:$Vk,55:243,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($V71,[2,66]),o($Vc,$Vu,{21:244,22:$Vv}),o($V81,[2,51]),{26:$VQ,30:245,35:$VR,36:$VS,37:$VT,38:$VU},{18:246,19:$Vf},o($Vc,[2,80]),{22:[1,247]},{20:[1,248],72:249,73:$V91,74:$Va1},o($Vc,[2,84]),o($Ve1,[2,86]),{26:$Vi,27:$Vj,40:250,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{29:[1,251]},{22:[1,252],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{28:[1,253],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{28:[1,254],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{19:[2,22]},{26:$VQ,30:255,35:$VR,36:$VS,37:$VT,38:$VU},o($V01,[2,31]),o($V01,[2,33]),o([5,20,22,25,26,28,29,33,39,41,50,56,57,58,65,67,68,69,73,74,75],[2,117],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN}),o($Vw,[2,119]),o($Vw,[2,120]),{28:[1,256],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},o($VO,[2,125]),{28:[1,257],33:$VX},o($Vc,$Vu,{21:258,22:$Vv}),{26:$V61,49:259},{19:[1,261],26:$Vi,27:$Vj,40:260,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vc,[2,44]),{54:[1,262]},{33:$VX,56:[1,263]},o($Vc,[2,50]),o($V81,$Vf1,{53:264,46:265,22:$Vg1,33:$Vh1,54:$VP}),o($Vb1,[2,78]),o($Vc,[2,81]),o($Vc,[2,83]),o($Ve1,[2,85]),{29:[1,268],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},o($Ve1,[2,90],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,23:16,42:19,59:20,63:22,4:269,25:$V0,26:$V1,39:$V2,41:$V3,50:$V4,57:$V5,58:$V6,65:$V7,67:$V8,68:$V9,69:$Va,75:$Vb}),{26:$Vi,27:$Vj,40:270,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},{18:271,19:$Vf},{18:272,19:$Vf},{19:[2,23]},o($Vw,[2,121]),o($VO,[2,126]),o($Vc,[2,45]),o($Vd1,[2,46]),o($Vd1,[2,48],{78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN}),{26:$V61,48:273,49:209},{26:$Vi,27:$Vj,40:118,54:$Vk,55:274,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vi1,[2,59]),o($V81,[2,53]),o($V81,$Vf1,{53:275,22:$Vg1,33:$Vh1,54:$VZ}),o($V81,[2,55]),o($V81,[2,56]),o($Ve1,[2,88],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,23:16,42:19,59:20,63:22,4:276,25:$V0,26:$V1,39:$V2,41:$V3,50:$V4,57:$V5,58:$V6,65:$V7,67:$V8,68:$V9,69:$Va,75:$Vb}),o($Ve1,[2,89],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,23:16,42:19,59:20,63:22,6:33,25:$V0,26:$V1,39:$V2,41:$V3,50:$V4,57:$V5,58:$V6,65:$V7,67:$V8,68:$V9,69:$Va,75:$Vb}),{22:[1,277],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},o($Vc,[2,92]),o($Vc,[2,93]),{20:[1,278],33:$Vc1},{33:$VX,56:[1,279]},o($V81,[2,54]),o($Ve1,[2,87],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,23:16,42:19,59:20,63:22,6:33,25:$V0,26:$V1,39:$V2,41:$V3,50:$V4,57:$V5,58:$V6,65:$V7,67:$V8,68:$V9,69:$Va,75:$Vb}),{26:$Vi,27:$Vj,40:280,54:$Vk,79:$Vl,86:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,99:73},o($Vd1,[2,49]),o($Vi1,[2,58]),{28:[1,281],78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,98:$VN},{18:282,19:$Vf},o($Vc,[2,91])],
defaultActions: {3:[2,2],28:[2,60],29:[2,61],32:[2,1],97:[2,24],228:[2,22],255:[2,23]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Omitir */
break;
case 1:/* Omitir */
break;
case 2:/* Omitir */
break;
case 3:return 104
break;
case 4:return 103
break;
case 5:return 80
break;
case 6:return 78
break;
case 7:return 79
break;
case 8:return 81
break;
case 9:return 82
break;
case 10:return 83
break;
case 11:return 97
break;
case 12:return 95
break;
case 13:return 96
break;
case 14:return 89
break;
case 15:return 90
break;
case 16:return 91
break;
case 17:return 92
break;
case 18:return 88
break;
case 19:return 87
break;
case 20:return 45
break;
case 21:return 84
break;
case 22:return 85
break;
case 23:return 86
break;
case 24:return 22
break;
case 25:return 29
break;
case 26:return 61
break;
case 27:return 27
break;
case 28:return 28
break;
case 29:return 19
break;
case 30:return 20
break;
case 31:return 54
break;
case 32:return 56
break;
case 33:return 33
break;
case 34:return 98
break;
case 35:return 36
break;
case 36:return 35
break;
case 37:return 38
break;
case 38:return 50
break;
case 39:return 58
break;
case 40:return 57
break;
case 41:return 102
break;
case 42:return 100
break;
case 43:return 101
break;
case 44:return 65
break;
case 45:return 64
break;
case 46:return 69
break;
case 47:return 73
break;
case 48:return 74
break;
case 49:return 'break'
break;
case 50:return 'continue'
break;
case 51:return 'return'
break;
case 52:return 75
break;
case 53:return 77
break;
case 54:return 76
break;
case 55:return 67
break;
case 56:return 68
break;
case 57:return 39
break;
case 58:return 41
break;
case 59:return 25
break;
case 60:return 93
break;
case 61:return 94
break;
case 62:return 26
break;
case 63:return 5
break;
case 64:return 'INVALID';
break;
}
},
rules: [/^(?:(["/"]["/"].*(\r|\n|\r\n)))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:[\s\t\r\n]+)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\?)/,/^(?:number\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:function\b)/,/^(?:([0-9]+(\.[0-9]+)?\b))/,/^(?:([\"\'\`](([^\"\'\`\\])*([\\].)*)*[\"\'\`]))/,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}