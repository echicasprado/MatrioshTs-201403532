/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,16],$V2=[1,10],$V3=[1,14],$V4=[1,15],$V5=[5,18,19,32,44,45],$V6=[37,47],$V7=[1,39],$V8=[1,40],$V9=[1,33],$Va=[1,32],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[5,15,18,19,32,37,40,44,45],$Vh=[5,15,18,19,22,26,32,37,40,44,45],$Vi=[5,13,18,19,32,44,45],$Vj=[13,18,32],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[5,15,18,19,21,26,32,42,44,45,48,49,50,51,52,53,54,55,57,58,59,60,61,62],$Vz=[2,12],$VA=[1,72],$VB=[1,80],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,85],$VH=[1,103],$VI=[26,42],$VJ=[5,12,15,18,19,21,26,32,37,40,44,45],$VK=[21,26],$VL=[5,15,18,19,21,26,32,42,44,45,48,49,54,55,57,58,59,60,61,62],$VM=[5,15,18,19,21,26,32,42,44,45,48,49,51,52,53,54,55,57,58,59,60,61,62],$VN=[5,15,18,19,21,26,32,42,44,45,54,55,57,58],$VO=[5,15,18,19,21,26,32,42,44,45,54,55,57,58,59,60],$VP=[5,15,18,19,26,32,44,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"FUNCTION":7,"PRINT":8,"DECLARATION":9,"ASSIGNMENT":10,"BLOCK":11,"llave_izq":12,"llave_der":13,"PUNTO_Y_COMA":14,"punto_y_coma":15,"FUNCTION_HEAD":16,"FUNCTION_SENTENCES":17,"function":18,"identificador":19,"par_izq":20,"par_der":21,"dos_puntos":22,"TYPE":23,"L_PARAMETROS":24,"FUNCTION_SENTENCE":25,"coma":26,"PARAMETRO":27,"void":28,"number":29,"string":30,"boolean":31,"print":32,"E":33,"TYPE_DECLARATION":34,"L_ID":35,"TYPE_VARIABLE":36,"=":37,"L_DIMENSION":38,"L_ARRAY":39,"cor_izq":40,"E_ARRAY":41,"cor_der":42,"L_E":43,"let":44,"const":45,"ACCESS":46,"punto":47,"+":48,"-":49,"**":50,"*":51,"/":52,"%":53,"&&":54,"||":55,"!":56,"!=":57,"==":58,">=":59,">":60,"<=":61,"<":62,"val_number":63,"val_string":64,"val_verdadero":65,"val_falso":66,"val_nulo":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"llave_izq",13:"llave_der",15:"punto_y_coma",18:"function",19:"identificador",20:"par_izq",21:"par_der",22:"dos_puntos",26:"coma",28:"void",29:"number",30:"string",31:"boolean",32:"print",37:"=",40:"cor_izq",41:"E_ARRAY",42:"cor_der",44:"let",45:"const",47:"punto",48:"+",49:"-",50:"**",51:"*",52:"/",53:"%",54:"&&",55:"||",56:"!",57:"!=",58:"==",59:">=",60:">",61:"<=",62:"<",63:"val_number",64:"val_string",65:"val_verdadero",66:"val_falso",67:"val_nulo"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[11,3],[11,2],[14,1],[14,0],[7,4],[7,3],[16,6],[16,7],[17,2],[17,1],[25,1],[25,1],[24,3],[24,1],[27,3],[23,1],[23,1],[23,1],[23,1],[23,1],[8,5],[9,4],[9,6],[9,5],[9,7],[39,5],[39,3],[43,3],[43,1],[34,1],[34,1],[35,3],[35,1],[36,2],[36,0],[38,3],[38,2],[10,4],[46,3],[46,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,3],[33,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 3:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 22: case 37: case 41:
 this.$ = []; this.$.push($$[$0]); 
break;
case 5: case 6: case 7: case 8: case 42:
 this.$ = $$[$0]; 
break;
case 9:
 this.$ = new Block($$[$0-1]); 
break;
case 10:
 this.$ = new Block([]); 
break;
case 11: case 12:
 this.$ = ";"; 
break;
case 13:
 this.$ = $$[$0-3]; 
break;
case 14:
 this.$ = $$[$0-2]; 
break;
case 15:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-4],[],$$[$0]); 
break;
case 16:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-3],$$[$0]); 
break;
case 17: case 18:
 
break;
case 19:
 
                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addInstruction(stack[stack.length -1]);
                                        break;
                                }
                        }
                
break;
case 20:
 
                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addFunction(stack[stack.length - 1]);
                                        break;
                                }
                        }       
                
break;
case 21: case 40:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 23:
 this.$ = new Parameter(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0],null); 
break;
case 24:
 this.$ = new Type(EnumType.VOID,""); 
break;
case 25:
 this.$ = new Type(EnumType.NUMBER,""); 
break;
case 26:
 this.$ = new Type(EnumType.STRING,""); 
break;
case 27:
 this.$ = new Type(EnumType.BOOLEAN,""); 
break;
case 28:
 this.$ = new Type(EnumType.TYPE,$$[$0]); 
break;
case 29:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2]); 
break;
case 30:
 this.$ = new Declaration(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1],""); 
break;
case 31:
 this.$ = new Declaration(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]); 
break;
case 32:
 this.$ = new DeclarationArray(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],""); 
break;
case 33:
 this.$ = new DeclarationArray(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],new Value(new Type(EnumType.ARRAY,""),$$[$0-1])); 
break;
case 34:
 this.$ = $$[$0-4]; this.$.push($$[$0-2]); 
break;
case 35:
 this.$ = []; this.$.push($$[$0-1]); 
break;
case 36:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 38:
 this.$ = new DeclarationType(EnumDeclarationType.LET); 
break;
case 39:
 this.$ = new DeclarationType(EnumDeclarationType.CONST); 
break;
case 43:
 this.$ = new Type(EnumType.NULL,""); 
break;
case 44:
 this.$ = $$[$0-2] + 1; 
break;
case 45:
 this.$ = 1; 
break;
case 46:
 this.$ = new Assignment(this._$.first_line,this.$.first_column,$$[$0-3],$$[$0-1]); 
break;
case 47:
 this.$ = $$[$0-2]; this.$.push(new Id(this._$.first_line,this._$.first_column,$$[$0])); 
break;
case 48:
 this.$ = []; this.$.push(new Id(this._$.first_line,this._$.first_column,$$[$0])); 
break;
case 49:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.PLUS),$$[$0-2],$$[$0]); 
break;
case 50:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MINUS),$$[$0-2],$$[$0]); 
break;
case 51:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.POWER),$$[$0-2],$$[$0]); 
break;
case 52:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MULTIPLICATION),$$[$0-2],$$[$0]); 
break;
case 53:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.DIVISION),$$[$0-2],$$[$0]); 
break;
case 54:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MODULE),$$[$0-2],$$[$0]); 
break;
case 55:
 this.$ = new Logic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.AND),$$[$0-2],$$[$0]); 
break;
case 56:
 this.$ = new Logic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.OR),$$[$0-2],$$[$0]); 
break;
case 57:
 this.$ = new Unary(this._$.first_line, this._$.first_column, new OperationType(EnumOperationType.NOT), $$[$0]); 
break;
case 58:
 this.$ = new Unary(this._$.first_line, this._$.first_column, new OperationType(EnumOperationType.NEGATIVE), $$[$0]);
break;
case 59:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.DIFFERENT_THAN),$$[$0-2],$$[$0]); 
break;
case 60:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LIKE_THAN),$$[$0-2],$$[$0]); 
break;
case 61:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MORE_EQUAL_TO),$$[$0-2],$$[$0]); 
break;
case 62:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LESS_EQUAL_TO),$$[$0-2],$$[$0]); 
break;
case 63:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LESS_THAN),$$[$0-2],$$[$0]); 
break;
case 64:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MORE_THAN),$$[$0-2],$$[$0]); 
break;
case 65:
 this.$ = new Value(new Type(EnumType.NUMBER,""),$$[$0]); 
break;
case 66:
 this.$ = new Value(new Type(EnumType.STRING,""),$$[$0]); 
break;
case 67: case 68:
 this.$ = new Value(new Type(EnumType.BOOLEAN,""),$$[$0]); 
break;
case 69:
 this.$ = new Value(new Type(EnumType.NULL,""),$$[$0]); 
break;
case 70:
 $$[$0-1].translatedCode = "("+ $$[$0-1].translatedCode +")"; this.$ = $$[$0-1]; 
break;
case 71:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,16:9,18:$V0,19:$V1,32:$V2,34:11,44:$V3,45:$V4,46:12},{1:[3]},{5:[1,17],6:18,7:5,8:6,9:7,10:8,16:9,18:$V0,19:$V1,32:$V2,34:11,44:$V3,45:$V4,46:12},{1:[2,2]},o($V5,[2,4]),o($V5,[2,5]),o($V5,[2,6]),o($V5,[2,7]),o($V5,[2,8]),{12:[1,19]},{20:[1,20]},{19:[1,22],35:21},{37:[1,23],47:[1,24]},{19:[1,25]},{19:[2,38]},{19:[2,39]},o($V6,[2,48]),{1:[2,1]},o($V5,[2,3]),{7:30,8:29,13:[1,27],16:9,17:26,18:$V0,25:28,32:$V2},{20:$V7,33:31,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},o($Vg,[2,43],{36:41,22:[1,43],26:[1,42]}),o($Vh,[2,41]),{20:$V7,33:44,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{19:[1,45]},{20:[1,46]},{13:[1,47]},o($Vi,[2,14]),{7:30,8:29,13:[2,18],16:9,17:48,18:$V0,25:28,32:$V2},o($Vj,[2,19]),o($Vj,[2,20]),{21:[1,49],48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx},{20:$V7,33:64,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:65,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},o($Vy,[2,65]),o($Vy,[2,66]),o($Vy,[2,67]),o($Vy,[2,68]),o($Vy,[2,69]),{20:$V7,33:66,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:68,40:$V8,43:67,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},o($V5,$Vz,{14:69,38:71,15:$VA,37:[1,70],40:[1,73]}),{19:[1,74]},{19:$VB,23:75,28:$VC,29:$VD,30:$VE,31:$VF},o($V5,$Vz,{14:81,15:$VA,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($V6,[2,47]),{19:$VG,21:[1,82],24:83,27:84},o($Vi,[2,13]),{13:[2,17]},{15:[1,86]},{20:$V7,33:87,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:88,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:89,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:90,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:91,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:92,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:93,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:94,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:95,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:96,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:97,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:98,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:99,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},{20:$V7,33:100,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},o($Vy,[2,57]),o($Vy,[2,58]),{21:[1,101],48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx},{26:$VH,42:[1,102]},o($VI,[2,37],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($V5,[2,30]),{20:$V7,33:104,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},o($V5,$Vz,{14:105,15:$VA,37:[1,106],40:[1,107]}),o($V5,[2,11]),{42:[1,108]},o($Vh,[2,40]),o($Vg,[2,42]),o($VJ,[2,24]),o($VJ,[2,25]),o($VJ,[2,26]),o($VJ,[2,27]),o($VJ,[2,28]),o($V5,[2,46]),{22:[1,109]},{21:[1,110],26:[1,111]},o($VK,[2,22]),{22:[1,112]},o($Vi,[2,29]),o($VL,[2,49],{50:$Vm,51:$Vn,52:$Vo,53:$Vp}),o($VL,[2,50],{50:$Vm,51:$Vn,52:$Vo,53:$Vp}),o($VM,[2,51],{50:$Vm}),o($VM,[2,52],{50:$Vm}),o($VM,[2,53],{50:$Vm}),o($VM,[2,54],{50:$Vm}),o([5,15,18,19,21,26,32,42,44,45,54,55],[2,55],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o([5,15,18,19,21,26,32,42,44,45,55],[2,56],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o([5,15,18,19,21,26,32,42,44,45,54,55,57],[2,59],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($VN,[2,60],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($VN,[2,61],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,61:$Vw,62:$Vx}),o($VN,[2,62],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,61:$Vw,62:$Vx}),o($VO,[2,63],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp}),o($VO,[2,64],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp}),o($Vy,[2,70]),o($Vy,[2,71]),{20:$V7,33:113,40:$V8,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},o($V5,$Vz,{14:114,15:$VA,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($V5,[2,32]),{39:115,40:[1,116]},{42:[1,117]},o($Vg,[2,45]),{19:$VB,23:118,28:$VC,29:$VD,30:$VE,31:$VF},{22:[1,119]},{19:$VG,27:120},{19:$VB,23:121,28:$VC,29:$VD,30:$VE,31:$VF},o($VI,[2,36],{48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($V5,[2,31]),o($V5,$Vz,{14:122,15:$VA,26:[1,123]}),{20:$V7,33:68,40:$V8,43:124,49:$V9,56:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf},o($Vg,[2,44]),{12:[2,15]},{19:$VB,23:125,28:$VC,29:$VD,30:$VE,31:$VF},o($VK,[2,21]),o($VK,[2,23]),o($V5,[2,33]),{40:[1,126]},{26:$VH,42:[1,127]},{12:[2,16]},{41:[1,128]},o($VP,[2,35]),{42:[1,129]},o($VP,[2,34])],
defaultActions: {3:[2,2],14:[2,38],15:[2,39],17:[2,1],48:[2,17],118:[2,15],125:[2,16]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Omitir */
break;
case 1:/* Omitir */
break;
case 2:/* Omitir */
break;
case 3:return '++'
break;
case 4:return '--'
break;
case 5:return 50
break;
case 6:return 48
break;
case 7:return 49
break;
case 8:return 51
break;
case 9:return 52
break;
case 10:return 53
break;
case 11:return 67
break;
case 12:return 65
break;
case 13:return 66
break;
case 14:return 59
break;
case 15:return 60
break;
case 16:return 61
break;
case 17:return 62
break;
case 18:return 58
break;
case 19:return 57
break;
case 20:return 37
break;
case 21:return 54
break;
case 22:return 55
break;
case 23:return 56
break;
case 24:return 15
break;
case 25:return 22
break;
case 26:return 47
break;
case 27:return 20
break;
case 28:return 21
break;
case 29:return 12
break;
case 30:return 13
break;
case 31:return 40
break;
case 32:return 42
break;
case 33:return 26
break;
case 34:return 'ternario'
break;
case 35:return 29
break;
case 36:return 28
break;
case 37:return 31
break;
case 38:return 'type'
break;
case 39:return 45
break;
case 40:return 44
break;
case 41:return 'push'
break;
case 42:return 'pop'
break;
case 43:return 'length'
break;
case 44:return 'if'
break;
case 45:return 'else'
break;
case 46:return 'switch'
break;
case 47:return 'case'
break;
case 48:return 'default'
break;
case 49:return 'break'
break;
case 50:return 'continue'
break;
case 51:return 'return'
break;
case 52:return 'for'
break;
case 53:return 'of'
break;
case 54:return 'in'
break;
case 55:return 'while'
break;
case 56:return 'do'
break;
case 57:return 32
break;
case 58:return 'graficar_ts'
break;
case 59:return 18
break;
case 60:return 63
break;
case 61:return 64
break;
case 62:return 19
break;
case 63:return 5
break;
case 64:return 'INVALID';
break;
}
},
rules: [/^(?:(["/"]["/"].*(\r|\n|\r\n)))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:[\s\t\r\n]+)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\?)/,/^(?:number\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:console\.log\b)/,/^(?:grafica_ts\b)/,/^(?:function\b)/,/^(?:([0-9]+(\.[0-9]+)?\b))/,/^(?:([\"\'\`](([^\"\'\`\\])*([\\].)*)*[\"\'\`]))/,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}