/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,18],$V2=[1,11],$V3=[1,12],$V4=[1,16],$V5=[1,17],$V6=[5,19,20,33,35,45,46],$V7=[1,29],$V8=[1,30],$V9=[39,49,76,77],$Va=[1,33],$Vb=[1,53],$Vc=[1,50],$Vd=[1,51],$Ve=[1,44],$Vf=[1,43],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[5,14,16,19,20,33,35,39,42,45,46],$Vm=[5,14,16,19,20,23,27,33,35,39,42,45,46],$Vn=[5,14,19,20,33,35,45,46],$Vo=[2,13],$Vp=[1,60],$Vq=[5,14,16,19,20,22,23,27,33,35,44,45,46,51,52,53,54,55,56,57,58,60,61,62,63,64,65,71],$Vr=[1,63],$Vs=[14,19,20,33,35,45,46],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[5,14,16,19,20,22,23,27,33,35,44,45,46,49,51,52,53,54,55,56,57,58,60,61,62,63,64,65,71,76,77],$VJ=[1,103],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[1,109],$VP=[1,130],$VQ=[22,27,44],$VR=[5,13,14,16,19,20,22,27,33,35,39,42,45,46],$VS=[22,27],$VT=[5,14,16,19,20,22,23,27,33,35,39,42,44,45,46,49,51,52,53,54,55,56,57,58,60,61,62,63,64,65,71,76,77],$VU=[5,14,16,19,20,22,23,27,33,35,44,45,46,51,52,57,58,60,61,62,63,64,65,71],$VV=[5,14,16,19,20,22,23,27,33,35,44,45,46,51,52,54,55,56,57,58,60,61,62,63,64,65,71],$VW=[5,14,16,19,20,22,23,27,33,35,44,45,46,57,58,60,61,71],$VX=[5,14,16,19,20,22,23,27,33,35,44,45,46,57,58,60,61,62,63,71],$VY=[5,14,16,19,20,27,33,35,45,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"FUNCTION":7,"PRINT":8,"GRAPH_TS":9,"DECLARATION":10,"ASSIGNMENT":11,"BLOCK":12,"llave_izq":13,"llave_der":14,"PUNTO_Y_COMA":15,"punto_y_coma":16,"FUNCTION_HEAD":17,"FUNCTION_SENTENCES":18,"function":19,"identificador":20,"par_izq":21,"par_der":22,"dos_puntos":23,"TYPE":24,"L_PARAMETROS":25,"FUNCTION_SENTENCE":26,"coma":27,"PARAMETRO":28,"void":29,"number":30,"string":31,"boolean":32,"print":33,"E":34,"graficar_ts":35,"TYPE_DECLARATION":36,"L_ID":37,"TYPE_VARIABLE":38,"=":39,"L_DIMENSION":40,"L_ARRAY":41,"cor_izq":42,"L_E":43,"cor_der":44,"let":45,"const":46,"ID_ASSIGNMENT":47,"POST_FIXED":48,"punto":49,"ACCESS_DIMENSION":50,"+":51,"-":52,"**":53,"*":54,"/":55,"%":56,"&&":57,"||":58,"!":59,"!=":60,"==":61,">=":62,">":63,"<=":64,"<":65,"val_number":66,"val_string":67,"val_verdadero":68,"val_falso":69,"val_nulo":70,"?":71,"ACCESS":72,"pop":73,"length":74,"push":75,"--":76,"++":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"llave_izq",14:"llave_der",16:"punto_y_coma",19:"function",20:"identificador",21:"par_izq",22:"par_der",23:"dos_puntos",27:"coma",29:"void",30:"number",31:"string",32:"boolean",33:"print",35:"graficar_ts",39:"=",42:"cor_izq",44:"cor_der",45:"let",46:"const",49:"punto",51:"+",52:"-",53:"**",54:"*",55:"/",56:"%",57:"&&",58:"||",59:"!",60:"!=",61:"==",62:">=",63:">",64:"<=",65:"<",66:"val_number",67:"val_string",68:"val_verdadero",69:"val_falso",70:"val_nulo",71:"?",73:"pop",74:"length",75:"push",76:"--",77:"++"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,3],[12,2],[15,1],[15,0],[7,4],[7,3],[17,6],[17,7],[18,2],[18,1],[26,1],[26,1],[26,1],[26,1],[26,1],[25,3],[25,1],[28,3],[24,1],[24,1],[24,1],[24,1],[24,1],[8,5],[9,4],[10,4],[10,6],[10,5],[10,7],[41,5],[41,3],[36,1],[36,1],[37,3],[37,1],[38,2],[38,0],[40,3],[40,2],[11,4],[11,3],[47,3],[47,4],[47,1],[47,2],[50,4],[50,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[34,3],[34,5],[34,2],[34,5],[34,5],[34,6],[34,1],[72,3],[72,4],[72,5],[72,6],[72,1],[72,2],[72,3],[72,4],[48,1],[48,1],[43,3],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 3:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 26: case 44: case 97:
 this.$ = []; this.$.push($$[$0]); 
break;
case 5: case 6: case 7: case 8: case 9: case 45:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = new Block($$[$0-1]); 
break;
case 11:
 this.$ = new Block([]); 
break;
case 12: case 13:
 this.$ = ";"; 
break;
case 14:
 this.$ = $$[$0-3]; 
break;
case 15:
 this.$ = $$[$0-2]; 
break;
case 16:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-4],[],$$[$0]); 
break;
case 17:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-3],$$[$0]); 
break;
case 18: case 19:
 
break;
case 20: case 21: case 22: case 23:
 
                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addInstruction(stack[stack.length -1]);
                                        break;
                                }
                        }
                
break;
case 24:
 
                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addFunction(stack[stack.length - 1]);
                                        break;
                                }
                        }       
                
break;
case 25: case 43:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 27:
 this.$ = new Parameter(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0],null); 
break;
case 28:
 this.$ = new Type(EnumType.VOID,""); 
break;
case 29:
 this.$ = new Type(EnumType.NUMBER,""); 
break;
case 30:
 this.$ = new Type(EnumType.STRING,""); 
break;
case 31:
 this.$ = new Type(EnumType.BOOLEAN,""); 
break;
case 32:
 this.$ = new Type(EnumType.TYPE,$$[$0]); 
break;
case 33:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2]); 
break;
case 34:
 console.log("Si llego"); this.$ = new GraphTs(this._$.first_line,this.$.first_column); 
break;
case 35:
 this.$ = new Declaration(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1],""); 
break;
case 36:
 this.$ = new Declaration(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]); 
break;
case 37:
 this.$ = new DeclarationArray(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],""); 
break;
case 38:
 this.$ = new DeclarationArray(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],new Value(new Type(EnumType.ARRAY,""),$$[$0-1])); 
break;
case 39:
 this.$ = $$[$0-4]; this.$.push($$[$0-2]); 
break;
case 40: case 56:
 this.$ = []; this.$.push($$[$0-1]); 
break;
case 41:
 this.$ = new DeclarationType(EnumDeclarationType.LET); 
break;
case 42:
 this.$ = new DeclarationType(EnumDeclarationType.CONST); 
break;
case 46:
 this.$ = new Type(EnumType.NULL,""); 
break;
case 47:
 this.$ = $$[$0-2] + 1; 
break;
case 48:
 this.$ = 1; 
break;
case 49:
 
                for(var i = 0; i < $$[$0-3].length;i++){
                        if($$[$0-3][i] instanceof AccessArray){
                                this.$ = new AssignmentArray(this._$.first_line,this.$.first_column,$$[$0-3],$$[$0-1]);
                                return;
                        }
                }
                this.$ = new Assignment(this._$.first_line,this.$.first_column,$$[$0-3],$$[$0-1]); 
        
break;
case 50:
 this.$ = new Unary(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0-2]); 
break;
case 51: case 86:
 this.$ = $$[$0-2]; this.$.push(new Id(this._$.first_line,this._$.first_column,$$[$0])); 
break;
case 52: case 87:
 this.$ = $$[$0-3]; this.$.push(new AccessArray(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0])); 
break;
case 53: case 90:
 this.$ = []; this.$.push(new Id(this._$.first_line,this._$.first_column,$$[$0])); 
break;
case 54: case 91:
 this.$ = []; this.$.push(new AccessArray(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0])); 
break;
case 55:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 57:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.PLUS),$$[$0-2],$$[$0]); 
break;
case 58:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MINUS),$$[$0-2],$$[$0]); 
break;
case 59:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.POWER),$$[$0-2],$$[$0]); 
break;
case 60:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MULTIPLICATION),$$[$0-2],$$[$0]); 
break;
case 61:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.DIVISION),$$[$0-2],$$[$0]); 
break;
case 62:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MODULE),$$[$0-2],$$[$0]); 
break;
case 63:
 this.$ = new Logic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.AND),$$[$0-2],$$[$0]); 
break;
case 64:
 this.$ = new Logic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.OR),$$[$0-2],$$[$0]); 
break;
case 65:
 this.$ = new Unary(this._$.first_line, this._$.first_column, new OperationType(EnumOperationType.NOT), $$[$0]); 
break;
case 66:
 this.$ = new Unary(this._$.first_line, this._$.first_column, new OperationType(EnumOperationType.NEGATIVE), $$[$0]);
break;
case 67:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.DIFFERENT_THAN),$$[$0-2],$$[$0]); 
break;
case 68:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LIKE_THAN),$$[$0-2],$$[$0]); 
break;
case 69:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MORE_EQUAL_TO),$$[$0-2],$$[$0]); 
break;
case 70:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MORE_THAN),$$[$0-2],$$[$0]); 
break;
case 71:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LESS_EQUAL_TO),$$[$0-2],$$[$0]); 
break;
case 72:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LESS_THAN),$$[$0-2],$$[$0]); 
break;
case 73:
 this.$ = new Value(new Type(EnumType.NUMBER,""),$$[$0]); 
break;
case 74:
 this.$ = new Value(new Type(EnumType.STRING,""),$$[$0]); 
break;
case 75: case 76:
 this.$ = new Value(new Type(EnumType.BOOLEAN,""),$$[$0]); 
break;
case 77:
 this.$ = new Value(new Type(EnumType.NULL,""),$$[$0]); 
break;
case 78:
 this.$ = $$[$0-1]; this.$.parentesis = true; 
break;
case 79:
 this.$ = $$[$0-1]; 
break;
case 80:
 this.$ = new Ternary(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 81:
 this.$ = new Unary(this._$.first_line,this._$.first_column,$$[$0],new Access(this._$.first_line,this._$.first_column,$$[$0-1])); 
break;
case 82:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.POP),new Access(this._$.first_line,this._$.first_column,$$[$0-4]),""); 
break;
case 83:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.LENGTH),new Access(this._$.first_line,this._$.first_column,$$[$0-4]),""); 
break;
case 84:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.PUSH),new Access(this._$.first_line,this._$.first_column,$$[$0-5]),$$[$0-1]); 
break;
case 85:
 this.$ = new Access(this._$.first_line,this._$.first_column,$$[$0]); 
break;
case 88:
 this.$ = $$[$0-4]; this.$.push(new CallFunction(this._$.first_line,this._$.first_column,$$[$0-2],[])); 
break;
case 89:
 this.$ = $$[$0-5]; this.$.push(new CallFunction(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1])); 
break;
case 92:
 this.$ = []; this.$.push(new CallFunction(this._$.first_line,this._$.first_column,$$[$0-2],[])); 
break;
case 93:
 this.$ = []; this.$.push(new CallFunction(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1])); 
break;
case 94:
 this.$ = new OperationType(EnumOperationType.MINUS_MINUS); 
break;
case 95:
 this.$ = new OperationType(EnumOperationType.PLUS_PLUS); 
break;
case 96:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,17:10,19:$V0,20:$V1,33:$V2,35:$V3,36:13,45:$V4,46:$V5,47:14},{1:[3]},{5:[1,19],6:20,7:5,8:6,9:7,10:8,11:9,17:10,19:$V0,20:$V1,33:$V2,35:$V3,36:13,45:$V4,46:$V5,47:14},{1:[2,2]},o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),o($V6,[2,7]),o($V6,[2,8]),o($V6,[2,9]),{13:[1,21]},{21:[1,22]},{21:[1,23]},{20:[1,25],37:24},{39:[1,26],48:27,49:[1,28],76:$V7,77:$V8},{20:[1,31]},{20:[2,41]},{20:[2,42]},o($V9,[2,53],{50:32,42:$Va}),{1:[2,1]},o($V6,[2,3]),{7:41,8:37,9:38,10:39,11:40,14:[1,35],17:10,18:34,19:$V0,20:$V1,26:36,33:$V2,35:$V3,36:13,45:$V4,46:$V5,47:14},{20:$Vb,21:$Vc,34:42,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{22:[1,54]},o($Vl,[2,46],{38:55,23:[1,57],27:[1,56]}),o($Vm,[2,44]),{20:$Vb,21:$Vc,34:58,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($Vn,$Vo,{15:59,16:$Vp}),{20:[1,61]},o($Vq,[2,94]),o($Vq,[2,95]),{21:[1,62]},o($V9,[2,54],{42:$Vr}),{20:$Vb,21:$Vc,34:64,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{14:[1,65]},o($Vn,[2,15]),{7:41,8:37,9:38,10:39,11:40,14:[2,19],17:10,18:66,19:$V0,20:$V1,26:36,33:$V2,35:$V3,36:13,45:$V4,46:$V5,47:14},o($Vs,[2,20]),o($Vs,[2,21]),o($Vs,[2,22]),o($Vs,[2,23]),o($Vs,[2,24]),{22:[1,67],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH},{20:$Vb,21:$Vc,34:83,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:84,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($Vq,[2,73]),o($Vq,[2,74]),o($Vq,[2,75]),o($Vq,[2,76]),o($Vq,[2,77]),{20:$Vb,21:$Vc,34:85,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:87,42:$Vd,43:86,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($Vq,[2,85],{48:88,49:[1,89],76:$V7,77:$V8}),o($VI,[2,90],{50:90,21:[1,91],42:$Va}),o($Vn,$Vo,{15:92,16:$Vp}),o($Vn,$Vo,{15:93,40:95,16:$Vp,39:[1,94],42:[1,96]}),{20:[1,97]},{20:$VJ,24:98,29:$VK,30:$VL,31:$VM,32:$VN},o($Vn,$Vo,{15:104,16:$Vp,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH}),o($Vn,[2,50]),o($Vn,[2,12]),o($V9,[2,51],{50:105,42:$Va}),{20:$VO,22:[1,106],25:107,28:108},{20:$Vb,21:$Vc,34:110,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{44:[1,111],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH},o($Vn,[2,14]),{14:[2,18]},o($Vn,$Vo,{15:112,16:$Vp}),{20:$Vb,21:$Vc,34:113,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:114,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:115,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:116,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:117,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:118,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:119,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:120,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:121,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:122,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:123,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:124,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:125,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:126,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{20:$Vb,21:$Vc,34:127,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($Vq,[2,65]),o($Vq,[2,66]),{22:[1,128],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH},{27:$VP,44:[1,129]},o($VQ,[2,97],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH}),o($Vq,[2,81]),{20:[1,134],73:[1,131],74:[1,132],75:[1,133]},o($VI,[2,91],{42:$Vr}),{20:$Vb,21:$Vc,22:[1,135],34:87,42:$Vd,43:136,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($Vn,[2,34]),o($Vn,[2,35]),{20:$Vb,21:$Vc,34:137,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($Vn,$Vo,{15:138,16:$Vp,39:[1,139],42:[1,140]}),{44:[1,141]},o($Vm,[2,43]),o($Vl,[2,45]),o($VR,[2,28]),o($VR,[2,29]),o($VR,[2,30]),o($VR,[2,31]),o($VR,[2,32]),o($Vn,[2,49]),o($V9,[2,52],{42:$Vr}),{23:[1,142]},{22:[1,143],27:[1,144]},o($VS,[2,26]),{23:[1,145]},{44:[1,146],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH},o($VT,[2,56]),o($Vn,[2,33]),o($VU,[2,57],{53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($VU,[2,58],{53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($VV,[2,59],{53:$Vv}),o($VV,[2,60],{53:$Vv}),o($VV,[2,61],{53:$Vv}),o($VV,[2,62],{53:$Vv}),o([5,14,16,19,20,22,23,27,33,35,44,45,46,57,58,71],[2,63],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG}),o([5,14,16,19,20,22,23,27,33,35,44,45,46,58,71],[2,64],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG}),o([5,14,16,19,20,22,23,27,33,35,44,45,46,57,58,60,71],[2,67],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG}),o($VW,[2,68],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,62:$VD,63:$VE,64:$VF,65:$VG}),o($VW,[2,69],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,64:$VF,65:$VG}),o($VW,[2,70],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,64:$VF,65:$VG}),o($VX,[2,71],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($VX,[2,72],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),{23:[1,147],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH},o($Vq,[2,78]),o($Vq,[2,79]),{20:$Vb,21:$Vc,34:148,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},{21:[1,149]},{21:[1,150]},{21:[1,151]},o($VI,[2,86],{50:152,21:[1,153],42:$Va}),o($VI,[2,92]),{22:[1,154],27:$VP},o($Vn,$Vo,{15:155,16:$Vp,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH}),o($Vn,[2,37]),{41:156,42:[1,157]},{44:[1,158]},o($Vl,[2,48]),{20:$VJ,24:159,29:$VK,30:$VL,31:$VM,32:$VN},{23:[1,160]},{20:$VO,28:161},{20:$VJ,24:162,29:$VK,30:$VL,31:$VM,32:$VN},o($VT,[2,55]),{20:$Vb,21:$Vc,34:163,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($VQ,[2,96],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH}),{22:[1,164]},{22:[1,165]},{20:$Vb,21:$Vc,34:166,42:$Vd,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($VI,[2,87],{42:$Vr}),{20:$Vb,21:$Vc,22:[1,167],34:87,42:$Vd,43:168,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($VI,[2,93]),o($Vn,[2,36]),o($Vn,$Vo,{15:169,16:$Vp,27:[1,170]}),{20:$Vb,21:$Vc,34:87,42:$Vd,43:171,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($Vl,[2,47]),{13:[2,16]},{20:$VJ,24:172,29:$VK,30:$VL,31:$VM,32:$VN},o($VS,[2,25]),o($VS,[2,27]),o([5,14,16,19,20,22,23,27,33,35,44,45,46],[2,80],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH}),o($Vq,[2,82]),o($Vq,[2,83]),{22:[1,173],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,71:$VH},o($VI,[2,88]),{22:[1,174],27:$VP},o($Vn,[2,38]),{42:[1,175]},{27:$VP,44:[1,176]},{13:[2,17]},o($Vq,[2,84]),o($VI,[2,89]),{20:$Vb,21:$Vc,34:87,42:$Vd,43:177,52:$Ve,59:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,72:52},o($VY,[2,40]),{27:$VP,44:[1,178]},o($VY,[2,39])],
defaultActions: {3:[2,2],16:[2,41],17:[2,42],19:[2,1],66:[2,18],159:[2,16],172:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Omitir */
break;
case 1:/* Omitir */
break;
case 2:/* Omitir */
break;
case 3:return 77
break;
case 4:return 76
break;
case 5:return 53
break;
case 6:return 51
break;
case 7:return 52
break;
case 8:return 54
break;
case 9:return 55
break;
case 10:return 56
break;
case 11:return 70
break;
case 12:return 68
break;
case 13:return 69
break;
case 14:return 62
break;
case 15:return 63
break;
case 16:return 64
break;
case 17:return 65
break;
case 18:return 61
break;
case 19:return 60
break;
case 20:return 39
break;
case 21:return 57
break;
case 22:return 58
break;
case 23:return 59
break;
case 24:return 16
break;
case 25:return 23
break;
case 26:return 49
break;
case 27:return 21
break;
case 28:return 22
break;
case 29:return 13
break;
case 30:return 14
break;
case 31:return 42
break;
case 32:return 44
break;
case 33:return 27
break;
case 34:return 71
break;
case 35:return 30
break;
case 36:return 29
break;
case 37:return 32
break;
case 38:return 'type'
break;
case 39:return 46
break;
case 40:return 45
break;
case 41:return 75
break;
case 42:return 73
break;
case 43:return 74
break;
case 44:return 'if'
break;
case 45:return 'else'
break;
case 46:return 'switch'
break;
case 47:return 'case'
break;
case 48:return 'default'
break;
case 49:return 'break'
break;
case 50:return 'continue'
break;
case 51:return 'return'
break;
case 52:return 'for'
break;
case 53:return 'of'
break;
case 54:return 'in'
break;
case 55:return 'while'
break;
case 56:return 'do'
break;
case 57:return 33
break;
case 58:return 35
break;
case 59:return 19
break;
case 60:return 66
break;
case 61:return 67
break;
case 62:return 20
break;
case 63:return 5
break;
case 64:return 'INVALID';
break;
}
},
rules: [/^(?:(["/"]["/"].*(\r|\n|\r\n)))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:[\s\t\r\n]+)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\?)/,/^(?:number\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:function\b)/,/^(?:([0-9]+(\.[0-9]+)?\b))/,/^(?:([\"\'\`](([^\"\'\`\\])*([\\].)*)*[\"\'\`]))/,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}